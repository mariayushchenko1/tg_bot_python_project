from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from datetime import datetime
import logging

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


class WorkoutData:
    def __init__(self):
        self.selected_days = []  # –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        self.completed = {}  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–µ–Ω—å": True/False)
        self.current_day = None  # —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(buttons):
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


START_KEYBOARD = get_keyboard([["–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]])
DAYS_KEYBOARD = get_keyboard([["–ü–Ω", "–í—Ç", "–°—Ä"], ["–ß—Ç", "–ü—Ç", "–°–±"], ["–í—Å", "–ì–æ—Ç–æ–≤–æ"]])
YES_NO_KEYBOARD = get_keyboard([["–î–∞", "–ù–µ—Ç"]])
MAIN_KEYBOARD = get_keyboard([["–ù–∞–∑–∞–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]])


# –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
def day_to_num(day):
    days = {"–ø–Ω": 0, "–≤—Ç": 1, "—Å—Ä": 2, "—á—Ç": 3, "–ø—Ç": 4, "—Å–±": 5, "–≤—Å": 6}
    return days.get(day.lower(), 0)


# –∫–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!\n\n"
        "(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ —Å—é–¥–∞ @SaludHealthCareBot)",
        reply_markup=START_KEYBOARD
    )


# –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
async def start_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = WorkoutData()

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=DAYS_KEYBOARD
    )


async def process_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if text == "–≥–æ—Ç–æ–≤–æ":
        if not user_data[user_id].selected_days:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!")
            return

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤: {', '.join(user_data[user_id].selected_days)}"
            f"\n\n–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ '–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'",
            reply_markup=MAIN_KEYBOARD
        )

    elif text in ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]:
        if text not in user_data[user_id].selected_days:
            user_data[user_id].selected_days.append(text)
            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω {text}")
# –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫


async def show_my_workouts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or not user_data[user_id].selected_days:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
    days_buttons = []
    for day in user_data[user_id].selected_days:
        days_buttons.append([day])

    days_buttons.append(["–ù–∞–∑–∞–¥"])

    await update.message.reply_text(
        "–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
        " –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å!",
        reply_markup=get_keyboard(days_buttons)
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
async def process_workout_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    day = update.message.text.lower()

    if user_id not in user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return

    if day not in user_data[user_id].selected_days:
        await update.message.reply_text("–≠—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–µ–Ω—å –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
    user_data[user_id].current_day = day
    await update.message.reply_text(
        f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ {day}?",
        reply_markup=YES_NO_KEYBOARD
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
async def process_workout_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.lower()

    if user_id not in user_data or user_data[user_id].current_day is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        return

    day = user_data[user_id].current_day
    date_key = f"{day}_{datetime.now().strftime('%Y-%m-%d')}"

    user_data[user_id].completed[date_key] = (answer == "–¥–∞")
    user_data[user_id].current_day = None

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ!" if answer == "–¥–∞" else "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∞–Ω! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!",
        reply_markup=MAIN_KEYBOARD
    )


# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∫–∞
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or not user_data[user_id].completed:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    user = user_data[user_id]
    total = len(user.completed)
    done = sum(user.completed.values())

    stats = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {total}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total - done}\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    )
    await update.message.reply_text(stats)


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("–≤–∞—à —Ç–æ–∫–µ–Ω").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text(["–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]), start_workout))
    application.add_handler(MessageHandler(filters.Text(["–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]), show_my_workouts))
    application.add_handler(
        MessageHandler(filters.Text(["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å", "–ì–æ—Ç–æ–≤–æ"]), process_days))
    application.add_handler(MessageHandler(filters.Text(["–î–∞", "–ù–µ—Ç"]), process_workout_answer))
    application.add_handler(MessageHandler(filters.Text(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), show_stats))
    application.add_handler(MessageHandler(filters.Text(["–ù–∞–∑–∞–¥"]), start))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
    application.add_handler(MessageHandler(
        filters.Text(["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]),
        process_workout_day
    ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()

