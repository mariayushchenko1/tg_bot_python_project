import logging
from aiogram import Bot, types, executor
from aiogram.utils import executor
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="YOUR_BOT_TOKEN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_tasks = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã
def get_frequency_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ö–∞–∂–¥—ã–π —á–∞—Å", "–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞", "–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", "–¢—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"]
    keyboard.add(*buttons)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def get_drank_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–í—ã–ø–∏–ª —Å—Ç–∞–∫–∞–Ω ‚úÖ", callback_data="drank"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def water_notifier(user_id: int, interval: int):
    while user_id in user_tasks:
        try:
            await bot.send_message(
                user_id,
                "üíß –ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã! üíß",
                reply_markup=get_drank_keyboard()
            )
            await asyncio.sleep(interval)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
            break

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üíß –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø–∏—Ç—å –≤–æ–¥—É.\n"
        "–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=get_frequency_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã
@bot.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    frequencies = {
        "–ö–∞–∂–¥—ã–π —á–∞—Å": 3600,
        "–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞": 7200,
        "–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞": 10800,
        "–¢—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å": 28800
    }
    
    if message.text in frequencies:
        user_id = message.from_user.id
        interval = frequencies[message.text]
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
        if user_id in user_tasks:
            user_tasks[user_id].cancel()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = asyncio.create_task(water_notifier(user_id, interval))
        user_tasks[user_id] = task
        
        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {message.text}",
            reply_markup=types.ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–∏–ª —Å—Ç–∞–∫–∞–Ω"
@bot.callback_query_handler(func=lambda call: call.data == "drank")
async def drank_water(callback: types.CallbackQuery):
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üíß")
    await callback.message.edit_reply_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
@bot.message_handler(commands=['stop'])
async def cmd_stop(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_tasks:
        user_tasks[user_id].cancel()
        del user_tasks[user_id]
        await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(bot, skip_updates=True)