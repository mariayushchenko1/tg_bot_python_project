from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
)
import sqlite3
import datetime
import logging

logging.basicConfig(level=logging.INFO)

# –∫–æ–Ω—Ñ–∏–≥
TOKEN = "–í–∞—à —Ç–æ–∫–µ–Ω"  # ! —Å—é–¥–∞ –∏ –≤ —Ñ–∞–π–ª–µ .env –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω !
DB_NAME = "sleep.db"
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_kb = ReplyKeyboardMarkup(
    [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–Ω–∞", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç"], ["–ü–æ–º–æ—â—å"]],
    resize_keyboard=True,
)

back_kb = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)


# –∏–Ω–∏—Ç –±–¥
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS sleep_logs (
                user_id INTEGER,
                sleep_time TEXT,
                wake_time TEXT,
                date TEXT,
                UNIQUE(user_id, date)
            )
        """)
        conn.commit()


# –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–µ–∫–µ—Ä —Å–Ω–∞!\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–Ω–∞.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–∫–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @SaludHealthCareBot\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ",
        reply_markup=main_menu_kb,
    )


# –∫–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–Ω–∞ - –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—á–µ—Ä–∞\n"
        "‚Ä¢ –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        "–í–∞–∂–Ω–æ!\n"
        "–í–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:45 –∏–ª–∏ 07:30)",
        reply_markup=main_menu_kb,
    )


# –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_states:
        del user_states[user_id]
    await start(update, context)


# –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∞
async def register_sleep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {"step": "ask_sleep_time"}
    await update.message.reply_text(
        "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ª–µ–≥–ª–∏ —Å–ø–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:45)",
        reply_markup=back_kb,
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async def process_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "–ù–∞–∑–∞–¥":
        return await back_to_menu(update, context)

    if user_id not in user_states:
        return await start(update, context)

    state = user_states[user_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not is_valid_time(text):
        await update.message.reply_text(
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:45)",
            reply_markup=back_kb,
        )
        return

    if state["step"] == "ask_sleep_time":
        state["sleep_time"] = text
        state["step"] = "ask_wake_time"
        await update.message.reply_text(
            "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)",
            reply_markup=back_kb,
        )
    elif state["step"] == "ask_wake_time":
        save_sleep_data(user_id, state["sleep_time"], text)
        duration = calculate_duration(state["sleep_time"], text)

        await update.message.reply_text(
            f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n" f"üí§ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {duration:.2f} —á",
            reply_markup=main_menu_kb,
        )
        del user_states[user_id]


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_valid_time(time_str):
    try:
        datetime.datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_sleep_data(user_id, sleep_time, wake_time):
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            """
            INSERT INTO sleep_logs (user_id, sleep_time, wake_time, date)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id, date) DO UPDATE SET
                sleep_time = excluded.sleep_time,
                wake_time = excluded.wake_time
            """,
            (user_id, sleep_time, wake_time, datetime.date.today().isoformat()),
        )


# —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞
def calculate_duration(sleep_time, wake_time):
    try:
        sleep = datetime.datetime.strptime(sleep_time, "%H:%M").time()
        wake = datetime.datetime.strptime(wake_time, "%H:%M").time()

        sleep_dt = datetime.datetime.combine(datetime.date.today(), sleep)
        wake_dt = datetime.datetime.combine(
            (
                datetime.date.today() + datetime.timedelta(days=1)
                if wake < sleep
                else datetime.date.today()
            ),
            wake,
        )

        return (wake_dt - sleep_dt).total_seconds() / 3600
    except:
        return 0


# –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
async def show_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = get_sleep_duration(user_id, datetime.date.today())
    yesterday = get_sleep_duration(
        user_id, datetime.date.today() - datetime.timedelta(days=1)
    )

    if today is None:
        await update.message.reply_text(
            "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_kb
        )
        return

    msg = f"üìä –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–ø–∞–ª–∏ {today:.2f} —á"

    if yesterday:
        delta = today - yesterday
        if delta > 0:
            msg += f" (–Ω–∞ {delta:.2f} —á –±–æ–ª—å—à–µ, —á–µ–º –≤—á–µ—Ä–∞)"
        elif delta < 0:
            msg += f" (–Ω–∞ {abs(delta):.2f} —á –º–µ–Ω—å—à–µ, —á–µ–º –≤—á–µ—Ä–∞)"
        else:
            msg += " (–∫–∞–∫ –≤—á–µ—Ä–∞)"

    await update.message.reply_text(msg, reply_markup=main_menu_kb)


def get_sleep_duration(user_id, date):
    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute(
            "SELECT sleep_time, wake_time FROM sleep_logs WHERE user_id = ? AND date = ?",
            (user_id, date.isoformat()),
        ).fetchone()

        if row and row[0] and row[1]:
            return calculate_duration(row[0], row[1])
        return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_menu_kb
    )


def main():
    init_db()

    app = Application.builder().token(TOKEN).build()

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.Regex("^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–Ω–∞$"), register_sleep))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç$"), show_report))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–º–æ—â—å$"), help_command))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_time_input))

    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
