from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
    CommandHandler
)
import sqlite3

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "—Ç–æ–∫–µ–Ω"
DB_NAME = "mood.db"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(
    [["1", "2", "3"], ["4", "5", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["–ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

factor_kb = ReplyKeyboardMarkup(
    [["–î—Ä—É–∑—å—è", "–°–µ–º—å—è"], ["–†–∞–±–æ—Ç–∞", "–£—á–µ–±–∞"], ["–ó–¥–æ—Ä–æ–≤—å–µ", "–î—Ä—É–≥–æ–µ"], ["–ù–∞–∑–∞–¥"]],
    resize_keyboard=True,
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS moods (
            user_id INTEGER,
            rating INTEGER,
            factor TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """
    )
    conn.commit()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–∫–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @SaludHealthCareBot",
        reply_markup=ReplyKeyboardMarkup([["–¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"]], resize_keyboard=True)
    )


async def start_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=main_kb)


async def process_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
    if text == "–ù–∞–∑–∞–¥":
        return await start(update, context)

    if text in ["1", "2", "3", "4", "5"]:
        context.user_data["rating"] = int(text)
        await update.message.reply_text("–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ?", reply_markup=factor_kb)


async def process_factor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ù–∞–∑–∞–¥":
        return await start_mood(update, context)

    if "rating" not in context.user_data:
        return await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞", reply_markup=main_kb
        )

    user_id = update.effective_user.id
    rating = context.user_data["rating"]
    factor = text

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO moods (user_id, rating, factor) VALUES (?, ?, ?)",
        (user_id, rating, factor),
    )
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {rating}", reply_markup=main_kb
    )
    context.user_data.clear()


async def show_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT AVG(rating) FROM moods WHERE user_id = ?", (user_id,))
    avg = cursor.fetchone()[0]

    cursor.execute(
        """
        SELECT factor, COUNT(*) as count
        FROM moods
        WHERE user_id = ?
        GROUP BY factor
        ORDER BY count DESC
        LIMIT 1
        """,
        (user_id,),
    )
    result = cursor.fetchone()
    conn.close()

    if avg is None:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_kb
        )
    else:
        message = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(avg, 2)}\n"
            f"‚Ä¢ –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ñ–∞–∫—Ç–æ—Ä: {result[0] if result else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )
        await update.message.reply_text(message, reply_markup=main_kb)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()
    init_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è$"), start_mood))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ 1-5 –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    application.add_handler(MessageHandler(filters.Regex("^([1-5]|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$"), process_rating))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è
    application.add_handler(MessageHandler(
        filters.Regex("^(–î—Ä—É–∑—å—è|–°–µ–º—å—è|–†–∞–±–æ—Ç–∞|–£—á–µ–±–∞|–ó–¥–æ—Ä–æ–≤—å–µ|–î—Ä—É–≥–æ–µ)$"),
        process_factor
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ (–¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)
    application.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_state = context.user_data.get("current_state")

    if "rating" in context.user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª —Ä–µ–π—Ç–∏–Ω–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Ü–µ–Ω–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        await start_mood(update, context)
    else:
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ
        await start(update, context)


if __name__ == "__main__":
    main()
