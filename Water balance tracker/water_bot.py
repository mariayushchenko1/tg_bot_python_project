# –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, time

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (—à–∞–≥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)

class WaterTracker(StatesGroup):
    weight = State()
    frequency = State()
    start_time = State()
    end_time = State()
    tracking = State()

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)

current_users = {}
user_timers = {}

# –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–∏—Ç—ã–π —Å—Ç–∞–∫–∞–Ω + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)

def glass_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="ü•§ –°—Ç–∞–∫–∞–Ω –≤—ã–ø–∏—Ç", callback_data="drink")]]
    )

def frequency_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=" –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç ", callback_data="freq_30")],
            [InlineKeyboardButton(text=" –ö–∞–∂–¥—ã–π —á–∞—Å ", callback_data="freq_60")],
            [InlineKeyboardButton(text=" –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ ", callback_data="freq_120")],
            [InlineKeyboardButton(text=" –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ ", callback_data="freq_180")]
        ]
    )

# —Ä–∞—Å—á—ë—Ç –Ω–æ—Ä–º—ã –≤–æ–¥—ã –≤ –ª–∏—Ç—Ä–∞—Ö –∏ —Å—Ç–∞–∫–∞–Ω–∞—Ö

def calculate_litr(weight):
    return max(round(weight * 30 / 1000, 1), 1)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã –≤ –ª–∏—Ç—Ä—ã

def calculate_norm(weight):
    return max(round(weight * 30 / 250), 1) # –≤ —Å—Ç–∞–∫–∞–Ω–µ 250 –º–ª

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–∞—Ä—Ç"

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(WaterTracker.weight)
    await message.answer("üíß –í–æ–¥–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä\n\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å!\n–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")

# –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Å–∞ –≤ –Ω–æ—Ä–º—É –≤–æ–¥—ã

@dp.message(WaterTracker.weight)
async def get_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 1:
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –∫–≥. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if weight > 250:
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 250 –∫–≥. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
            
        await state.update_data(
            weight=weight,
            norm=calculate_norm(weight),
            drunk=0
        )
        await state.set_state(WaterTracker.frequency)
        await message.answer(
            f"–°—É–ø–µ—Ä! –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ ‚Äî {calculate_litr(weight)} –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã. –≠—Ç–æ –æ–∫–æ–ª–æ {calculate_norm(weight)} —Å—Ç–∞–∫–∞–Ω–æ–≤\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
            reply_markup=frequency_buttons()
        )
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 250")

# callback –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

@dp.callback_query(lambda c: c.data.startswith("freq_"))
async def process_frequency(callback: types.CallbackQuery, state: FSMContext):
    freq = int(callback.data.split("_")[1])
    await state.update_data(frequency=freq)
    await state.set_state(WaterTracker.start_time)
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: –∫–∞–∂–¥—ã–µ {freq} –º–∏–Ω—É—Ç\n"
        "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? (–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00)"
    )
    await callback.answer()

# –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å

@dp.message(WaterTracker.start_time)
async def get_start_time(message: types.Message, state: FSMContext):
    try:
        start = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(start_time=start)
        await state.set_state(WaterTracker.end_time)
        await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? (–ù–∞–ø—Ä–∏–º–µ—Ä: 21:00)")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM")

# –≤—ã–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

@dp.message(WaterTracker.end_time)
async def get_end_time(message: types.Message, state: FSMContext):
    try:
        end = datetime.strptime(message.text, "%H:%M").time()
        user_data = await state.get_data()
        
        current_users[message.from_user.id] = user_data
        await state.set_state(WaterTracker.tracking)
        
        task = asyncio.create_task(schedule_reminders(message.from_user.id, user_data['frequency']))
        user_timers[message.from_user.id] = task
        
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"‚Ä¢ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user_data['norm']} —Å—Ç–∞–∫–∞–Ω–æ–≤\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∫–∞–∂–¥—ã–µ {user_data['frequency']} –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Å {user_data['start_time'].strftime('%H:%M')} –¥–æ {end.strftime('%H:%M')}"
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM")


# –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

async def schedule_reminders(user_id: int, interval_minutes: int):
    while user_id in current_users:
        try:
            data = current_users[user_id]
            remaining = data['norm'] - data['drunk']
            
            if remaining <= 0:
                await bot.send_message(user_id, "üéâ –£—Ä–∞, –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –î–æ –∑–∞–≤—Ç—Ä–∞")
                break
                
            await bot.send_message(
                user_id,
                f"‚è∞ –ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å—Ç–∞–∫–∞–Ω–æ–≤",
                reply_markup=glass_buttons()
            )
            
            await asyncio.sleep(interval_minutes * 60)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è {user_id}: {e}")
            break

# callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞–∫–∞–Ω–æ–º

@dp.callback_query(lambda c: c.data == "drink")
async def drink_water(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_users:
        return
        
    current_users[user_id]['drunk'] += 1
    remaining = current_users[user_id]['norm'] - current_users[user_id]['drunk']
    
    if remaining > 0:
        await callback.message.edit_text(
            f"üíô –ü—Ä–∏–Ω—è—Ç–æ! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å—Ç–∞–∫–∞–Ω–æ–≤", # –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–ø—å–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É
            reply_markup=glass_buttons()
        )
    else:
        await callback.message.edit_text("üéâ –£—Ä–∞, –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –î–æ –∑–∞–≤—Ç—Ä–∞")
        if user_id in user_timers:
            user_timers[user_id].cancel()
            del user_timers[user_id]
        if user_id in current_users:
            del current_users[user_id]
    
    await callback.answer()

# –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –≤ 00:00

async def daily_reset():
    for user_id in list(current_users.keys()):
        try:
            await bot.send_message(user_id, "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å! –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ.")
            current_users[user_id]['drunk'] = 0
            if user_id in user_timers:
                user_timers[user_id].cancel()
            task = asyncio.create_task(schedule_reminders(user_id, current_users[user_id]['frequency']))
            user_timers[user_id] = task
        except:
            if user_id in current_users:
                del current_users[user_id]
            if user_id in user_timers:
                user_timers[user_id].cancel()
                del user_timers[user_id]

async def run_periodic_tasks():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            await daily_reset()
        await asyncio.sleep(60)
